{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ProposalRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "Voted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					}
				],
				"name": "VoterRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "enum Voting.WorkflowStatus",
						"name": "previousStatus",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "enum Voting.WorkflowStatus",
						"name": "newStatus",
						"type": "uint8"
					}
				],
				"name": "WorkflowStatusChange",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "StartProposalsRegistration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "StartRegisteringVoters",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "StartVotingSession",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "StopProposalsRegistration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "StopVotingSession",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "discoverWinningProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getProposalVotedForUser",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getProposals",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "voteCount",
								"type": "uint256"
							}
						],
						"internalType": "struct Voting.Proposal[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinningProposalDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "voteCount",
								"type": "uint256"
							}
						],
						"internalType": "struct Voting.Proposal",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "proposals",
				"outputs": [
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "voteCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_description",
						"type": "string"
					}
				],
				"name": "registerProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_voterAddress",
						"type": "address"
					}
				],
				"name": "registerVoter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_votersAdresses",
						"type": "address[]"
					}
				],
				"name": "registerVoters",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "status",
				"outputs": [
					{
						"internalType": "enum Voting.WorkflowStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_proposalId",
						"type": "uint256"
					}
				],
				"name": "voting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Sylvain JOUANY",
			"events": {
				"ProposalRegistered(uint256)": {
					"params": {
						"proposalId": "Proposal id for the new proposal registered"
					}
				},
				"Voted(address,uint256)": {
					"params": {
						"proposalId": "Proposal id choosen by the voter",
						"voter": "Address for the voter"
					}
				},
				"VoterRegistered(address)": {
					"params": {
						"voterAddress": "Address registered to the withelist"
					}
				},
				"WorkflowStatusChange(uint8,uint8)": {
					"params": {
						"newStatus": "New status of the workflow",
						"previousStatus": "Previous status of the workflow"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"discoverWinningProposal()": {
					"details": "Stored inside a contract variable to avoid to loop on the array many times during voters results consultation"
				},
				"getProposalVotedForUser(address)": {
					"params": {
						"_address": "Address of a Voter"
					},
					"returns": {
						"_0": "description of the proposal chosen by the voter"
					}
				},
				"getProposals()": {
					"returns": {
						"_0": "Proposals array"
					}
				},
				"getWinningProposalDetails()": {
					"returns": {
						"_0": "proposal details"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerProposal(string)": {
					"params": {
						"_description": "Proposal description"
					}
				},
				"registerVoter(address)": {
					"params": {
						"_voterAddress": "Address to add to the whitelist"
					}
				},
				"registerVoters(address[])": {
					"details": "Already registered addresses are ignored",
					"params": {
						"_votersAdresses": "Addresses to add to the whitelist"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"voting(uint256)": {
					"params": {
						"_proposalId": "Proposal id choosen by the voter"
					}
				}
			},
			"stateVariables": {
				"proposals": {
					"details": "public to be able to get a proposal by id"
				},
				"status": {
					"details": "public to be able to get the current status"
				},
				"winningProposalId": {
					"details": "Used to avoid to loop each time on proposals array to find the hisghest count for a proposal"
				}
			},
			"title": "A contract named Voting",
			"version": 1
		},
		"userdoc": {
			"events": {
				"ProposalRegistered(uint256)": {
					"notice": "Event emitted when a new proposal is registered"
				},
				"Voted(address,uint256)": {
					"notice": "Event emitted when a voter do a vote"
				},
				"VoterRegistered(address)": {
					"notice": "Event emitted when a voter is registered"
				},
				"WorkflowStatusChange(uint8,uint8)": {
					"notice": "Event emitted when the workflow status change"
				}
			},
			"kind": "user",
			"methods": {
				"StartProposalsRegistration()": {
					"notice": "Set ProposalsRegistrationStarted status."
				},
				"StartRegisteringVoters()": {
					"notice": "Set RegisteringVoters status."
				},
				"StartVotingSession()": {
					"notice": "Set VotingSessionStarted status."
				},
				"StopProposalsRegistration()": {
					"notice": "Set ProposalsRegistrationEnded status."
				},
				"StopVotingSession()": {
					"notice": "Set VotingSessionEnded status."
				},
				"discoverWinningProposal()": {
					"notice": "Store the winning proposal id"
				},
				"getProposalVotedForUser(address)": {
					"notice": "Get details of winning proposal"
				},
				"getProposals()": {
					"notice": "Get all proposals"
				},
				"getWinningProposalDetails()": {
					"notice": "Get details of winning proposal"
				},
				"proposals(uint256)": {
					"notice": "Proposal array"
				},
				"registerProposal(string)": {
					"notice": "Register a new proposal."
				},
				"registerVoter(address)": {
					"notice": "Register an new address to the whitelist."
				},
				"registerVoters(address[])": {
					"notice": "Register several new addresses to the whitelist."
				},
				"status()": {
					"notice": "Current Status for voting"
				},
				"voting(uint256)": {
					"notice": "execute a vote"
				}
			},
			"notice": "Provide a voting contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Voting/Voting.sol": "Voting"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"Voting/Voting.sol": {
			"keccak256": "0x2ce7e770d8c9ad874ffc0613991942613d0f2d2c783412daeba428c6d8d03924",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bc8b4d18230aba9288feab95893de9d3eb314e8657eef225424a56fe8fd9813d",
				"dweb:/ipfs/QmfCvkV9u1S8BGJ2tS92XtHMm783r9eGKRRQM4kLXeEoMX"
			]
		}
	},
	"version": 1
}